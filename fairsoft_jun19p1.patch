diff -ruN a/scripts/install_root6.sh b/scripts/install_root6.sh
--- a/scripts/install_root6.sh
+++ b/scripts/install_root6.sh
@@ -52,6 +52,11 @@
   fi
   echo "Configure Root .........................................." | tee -a $logfile
 
+  # patch PostgreSQL - will be added after 6-19-01 (Konstantin Gertsenberger)
+  mypatch ../root6_16_pgsql.patch
+  # patch XRootD - installation of binary files (Konstantin Gertsenberger)
+  mypatch ../root6_16_xrootd.patch
+
   cd build_for_fair/
   . rootconfig.sh
 
diff -ruN a/tools/root6_16_pgsql.patch b/tools/root6_16_pgsql.patch 
--- a/tools/root6_16_pgsql.patch
+++ b/tools/root6_16_pgsql.patch
@@ -0,0 +1,177 @@
+--- net/net/inc/TSQLStatement.h
++++ net/net/inc/TSQLStatement.h
+@@ -15,6 +15,7 @@
+ #include "TObject.h"
+ #include "TString.h"
+ #include "TDatime.h"
++#include "TTimeStamp.h"
+ #include<vector>
+ 
+ class TSQLStatement : public TObject {
+@@ -53,6 +54,7 @@
+    virtual Bool_t      SetDatime(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t) { return kFALSE; }
+            Bool_t      SetDatime(Int_t, const TDatime&);
+    virtual Bool_t      SetTimestamp(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t = 0) { return kFALSE; }
++   virtual Bool_t      SetTimestamp(Int_t, const TTimeStamp&) { return kFALSE; }
+            Bool_t      SetTimestamp(Int_t, const TDatime&);
+    virtual void        SetTimeFormating(const char*) {}
+    virtual Bool_t      SetBinary(Int_t, void*, Long_t, Long_t = 0x1000) { return kFALSE; }
+@@ -97,6 +99,7 @@
+            Int_t       GetMinute(Int_t);
+            Int_t       GetSecond(Int_t);
+    virtual Bool_t      GetTimestamp(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&) { return kFALSE; }
++   virtual Bool_t      GetTimestamp(Int_t, TTimeStamp&) { return kFALSE; }
+            TDatime     GetTimestamp(Int_t);
+ #ifndef __MAKECINT__
+    virtual Bool_t      GetVInt(Int_t, std::vector<Int_t>&) { return kFALSE; }
+--- sql/pgsql/inc/TPgSQLStatement.h
++++ sql/pgsql/inc/TPgSQLStatement.h
+@@ -16,9 +16,6 @@
+ 
+ #include <libpq-fe.h>
+ #include <pg_config.h> // to get PG_VERSION_NUM
+-#ifdef USE_LDAP
+-#undef USE_LDAP
+-#endif
+ 
+ #define pgsql_success(x) (((x) == PGRES_EMPTY_QUERY) \
+                         || ((x) == PGRES_COMMAND_OK) \
+@@ -80,6 +77,7 @@
+    virtual Bool_t      SetTime(Int_t npar, Int_t hour, Int_t min, Int_t sec);
+    virtual Bool_t      SetDatime(Int_t npar, Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec);
+    virtual Bool_t      SetTimestamp(Int_t npar, Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t frac = 0);
++   virtual Bool_t      SetTimestamp(Int_t npar, const TTimeStamp& tm);
+ 
+    virtual Bool_t      NextIteration();
+ 
+@@ -105,6 +103,7 @@
+    virtual Bool_t      GetTime(Int_t npar, Int_t& hour, Int_t& min, Int_t& sec);
+    virtual Bool_t      GetDatime(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec);
+    virtual Bool_t      GetTimestamp(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec, Int_t&);
++   virtual Bool_t      GetTimestamp(Int_t npar, TTimeStamp& tm);
+ 
+    ClassDef(TPgSQLStatement, 0);  // SQL statement class for PgSQL DB
+ };
+--- sql/pgsql/src/TPgSQLStatement.cxx
++++ sql/pgsql/src/TPgSQLStatement.cxx
+@@ -21,6 +21,7 @@
+ #include "TDataType.h"
+ #include "TDatime.h"
+ #include "TTimeStamp.h"
++#include "TMath.h"
+ 
+ #include <stdlib.h>
+ 
+@@ -30,7 +31,7 @@
+ 
+ #include "libpq/libpq-fs.h"
+ 
+-static const Int_t kBindStringSize = 25;
++static const Int_t kBindStringSize = 30;    // big enough to handle text rep. of 64 bit number and timestamp (e.g. "1970-01-01 01:01:01.111111+00")
+ 
+ ////////////////////////////////////////////////////////////////////////////////
+ /// Normal constructor.
+@@ -330,7 +331,7 @@
+ 
+    fBind = new char*[fNumBuffers];
+    for(int i=0; i<fNumBuffers; ++i){
+-      fBind[i] = new char[kBindStringSize]; //big enough to handle text rep. of 64 bit number
++      fBind[i] = new char[kBindStringSize];
+    }
+    fFieldName = new char*[fNumBuffers];
+ 
+@@ -666,6 +667,25 @@
+ }
+ 
+ ////////////////////////////////////////////////////////////////////////////////
++/// Return value of parameter in form of TTimeStamp
++/// Be aware, that TTimeStamp does not allow dates before 1970-01-01
++
++Bool_t TPgSQLStatement::GetTimestamp(Int_t npar, TTimeStamp& tm)
++{
++   Int_t year, month, day, hour, min, sec, microsec;
++   GetTimestamp(npar, year, month, day, hour, min, sec, microsec);
++
++   if (year < 1970) {
++      SetError(-1, "Date before year 1970 does not supported by TTimeStamp type", "GetTimestamp");
++      return kFALSE;
++   }
++
++   tm.Set(year, month, day, hour, min, sec, microsec*1000, kTRUE, 0);
++
++   return kTRUE;
++}
++
++////////////////////////////////////////////////////////////////////////////////
+ /// Set NULL as parameter value.
+ /// If NULL should be set for statement parameter during first iteration,
+ /// one should call before proper Set... method to identify type of argument for
+@@ -850,17 +870,17 @@
+ }
+ 
+ ////////////////////////////////////////////////////////////////////////////////
+-/// Set parameter value as date & time.
++/// Set parameter value as date & time, in UTC.
+ 
+ Bool_t TPgSQLStatement::SetDatime(Int_t npar, Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec)
+ {
+    TDatime d=TDatime(year,month,day,hour,min,sec);
+-   snprintf(fBind[npar],kBindStringSize,"%s",(char*)d.AsSQLString());
++   snprintf(fBind[npar],kBindStringSize,"%s+00",(char*)d.AsSQLString());
+    return kTRUE;
+ }
+ 
+ ////////////////////////////////////////////////////////////////////////////////
+-/// Set parameter value as timestamp.
++/// Set parameter value as timestamp, in UTC.
+ /// Second fraction is assumed as value in microseconds,
+ /// i.e. as a fraction with six decimal places.
+ /// See GetTimestamp() for an example.
+@@ -868,7 +888,16 @@
+ Bool_t TPgSQLStatement::SetTimestamp(Int_t npar, Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t frac)
+ {
+    TDatime d(year,month,day,hour,min,sec);
+-   snprintf(fBind[npar],kBindStringSize,"%s.%06d",(char*)d.AsSQLString(),frac);
++   snprintf(fBind[npar],kBindStringSize,"%s.%06d+00",(char*)d.AsSQLString(),frac);
++   return kTRUE;
++}
++
++////////////////////////////////////////////////////////////////////////////////
++/// Set parameter value as timestamp from TTimeStamp object
++
++Bool_t TPgSQLStatement::SetTimestamp(Int_t npar, const TTimeStamp& tm)
++{
++   snprintf(fBind[npar], kBindStringSize, "%s.%06d+00", (char*)tm.AsString("s"), TMath::Nint(tm.GetNanoSec() / 1000.0));
+    return kTRUE;
+ }
+ 
+@@ -1107,6 +1136,15 @@
+ }
+ 
+ ////////////////////////////////////////////////////////////////////////////////
++/// Return value of parameter in form of TTimeStamp
++/// Be aware, that TTimeStamp does not allow dates before 1970-01-01
++
++Bool_t TPgSQLStatement::GetTimestamp(Int_t npar, TTimeStamp& tm)
++{
++   return kFALSE;
++}
++
++////////////////////////////////////////////////////////////////////////////////
+ /// Set parameter type to be used as buffer.
+ /// Used in both setting data to database and retriving data from data base.
+ /// Initialize proper PGSQL_BIND structure and allocate required buffers.
+@@ -1235,5 +1273,13 @@
+ {
+    return kFALSE;
+ }
++
++////////////////////////////////////////////////////////////////////////////////
++/// Set parameter value as timestamp from TTimeStamp object
++
++Bool_t TPgSQLStatement::SetTimestamp(Int_t, const TTimeStamp&)
++{
++   return kFALSE;
++}
+ 
+ #endif  //PG_VERSION_NUM
diff -ruN a/tools/rootconfig.sh b/tools/rootconfig.sh
--- a/tools/rootconfig.sh
+++ b/tools/rootconfig.sh
@@ -14,7 +14,7 @@
      debugstring=""
    fi
 
-   XROOTD="-Dxrootd=OFF -Dbuiltin_xrootd=OFF"
+   XROOTD="-Dxrootd=OFF -Dbuiltin_xrootd=ON"
    ROOFIT="-Droofit=ON"
 
    OPENGL=" "
diff -ruN a/tools/root6_16_xrootd.patch b/tools/root6_16_xrootd.patch 
--- a/tools/root6_16_xrootd.patch
+++ b/tools/root6_16_xrootd.patch
@@ -0,0 +1,33 @@
+--- cmake/modules/SearchInstalledSoftware.cmake
++++ cmake/modules/SearchInstalledSoftware.cmake
+@@ -889,6 +889,11 @@
+   string(REPLACE "-W " "" __cxxflags "${__cxxflags}")          # Otherwise it produces many warnings
+   string(REPLACE "-Wshadow" "" __cxxflags "${__cxxflags}")          # Otherwise it produces many warnings
+   string(REPLACE "-Woverloaded-virtual" "" __cxxflags "${__cxxflags}")  # Otherwise it produces manywarnings  
++  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
++    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "9")
++      string(APPEND __cxxflags " -Wno-error=deprecated-copy")  # GCC 9 compilation correction
++    endif()
++  endif()
+   set(XROOTD_LIBRARIES ${XROOTD_ROOTDIR}/${_LIBDIR_DEFAULT}/libXrdUtils${CMAKE_SHARED_LIBRARY_SUFFIX}
+                        ${XROOTD_ROOTDIR}/${_LIBDIR_DEFAULT}/libXrdClient${CMAKE_SHARED_LIBRARY_SUFFIX}
+                        ${XROOTD_ROOTDIR}/${_LIBDIR_DEFAULT}/libXrdCl${CMAKE_SHARED_LIBRARY_SUFFIX})
+@@ -906,8 +911,10 @@
+                -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
+                -DENABLE_PYTHON=OFF
+                -DENABLE_CEPH=OFF
++               -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=<INSTALL_DIR>/bin/xrd_bin
+     INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install
+             COMMAND ${CMAKE_COMMAND} -E copy_directory <INSTALL_DIR>/include/xrootd <INSTALL_DIR>/include
++            COMMAND ${CMAKE_COMMAND} -E copy_directory <INSTALL_DIR>/bin/xrd_bin <INSTALL_DIR>/bin
+     LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1
+     BUILD_BYPRODUCTS ${XROOTD_LIBRARIES}
+   )
+@@ -916,6 +923,7 @@
+   set(XROOTD_NOMAIN TRUE)
+   set(XROOTD_CFLAGS "-DROOTXRDVERS=${XROOTD_VERSIONNUM}")
+   install(DIRECTORY ${XROOTD_ROOTDIR}/${_LIBDIR_DEFAULT}/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN "libXrd*")
++  install(DIRECTORY ${XROOTD_ROOTDIR}/bin/xrd_bin/ DESTINATION ${CMAKE_INSTALL_BINDIR} USE_SOURCE_PERMISSIONS)
+   install(DIRECTORY ${XROOTD_ROOTDIR}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)
+   set(XROOTD_TARGET XROOTD)
+   set(xrootd ON CACHE BOOL "Enabled because builtin_xrootd requested (${xrootd_description})" FORCE)
